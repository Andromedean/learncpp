assert
#include <cassert>
assert(<boolean <~&& "message">>);
  boolean may &&ed with a string since string literals evaluate to true to include with
If the conditional expression evaluates to false, an error message is displayed and the program is terminated (via std::abort)
This error message typically contains the expression that failed as text, along with the name of the code file and the line number of the assertion
Use to document cases that should be logically impossible
  Sometimes used as standins for unimplemented cases
~ should not appear in prod code:
    if NDEBUG is defined, asserts will not be compiled in
abort() function terminates the program immediately, without a chance to do any further cleanup (e.g. close a file or database)
Because of this, asserts should be used only in cases where corruption isnâ€™t likely to occur if the program terminates unexpectedly

static assert
keyword so no include needed
static_assert(<condition>, <~diagnostic_message>)
eg: static_assert(sizeof(long) == 8, "long must be 8 bytes");
checked at compile-time: failing causes compilation to fail
  condition must be a constant expression
can be placed anywhere in the code file (even in the global namespace)
not compiled out in release builds (regardless of NDEBUG being defined?)
